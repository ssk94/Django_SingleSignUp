###############------------urls.py-----------------#########################


# url(r'^employee$', views.AddEmployeeView.as_view(), name='add_employee'),
# url(r'^employee/senior$', views.AssignManagerView.as_view(), name='assign_manager'),

# url(r'^approve_employee', views.ApproveEmployee.as_view(), name='approve_employee'),

###########-----------Permission urls--------------------###################
##########------------UserSpecialPermission-----------------####################
#url(r'^permission/user', permissions.UserPermissionView.as_view(), name='user_permission'),


###########-------------email_service.py--------------#############
from django.core.mail import send_mail
from django.core.mail import EmailMultiAlternatives


# subject, from_email, to = 'Regarding Account Creation- DscignBiosys', 'mayurbppatil@gmail.com', email
# text_content = 'This is an important message.'
# html_content = '<p>This is an important message.</p><br><p>Your Account in Dscign Biosys has been Created Successfully, And your <strong>User ID</strong>- '+email+'</p><br/><br/><strong>Note: </strong> Password will receive on your register Mail ID shortly.'
# msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
# msg.attach_alternative(html_content, "text/html")
# msg.send()

def send_email(subject, to, text_content, html_content):
	msg = EmailMultiAlternatives(subject, text_content, 'kulkarnisaroj5@gmail.com', [to])
	msg.attach_alternative(html_content, "text/html")
	return msg.send()



#############------------------serializers.py-----------##########

#############---------------Permission Serializers----------#############
# class PermissionReadSerializer(serializers.ModelSerializer):
#     permission = PermissionSerializer(many=True, read_only=True)
#     class Meta:
#         model = UserPermission
#         fields = '__all__'

# class UserPermissionSerialize(serializers.ModelSerializer):
#     user_permission = PermissionReadSerializer()
#     user_role = RoleSerializer()
#     class Meta:
#         model = User
#         fields = ['username', 'id', 'first_name', 'last_name', 'user_permission', 'user_role']



##############-----------------permissions.py-----------------###################
###########--------------userSpecialPermission-----------------#####################
# class UserPermissionView(APIView):
# 	def post(self, request):
# 		if request.data:
# 			user_id = request.data.get('user', None)
# 			permission_id = request.data.get('permission', None)
# 			if user_id:
# 				user = User.objects.filter(id = user_id).first()
# 				if user:
# 					user_permission_obj = UserPermission.objects.filter(user = user_id).first()
# 					permission_instance = Permission.objects.filter(id=permission_id).first()
# 					if user_permission_obj:
# 						user_permission_obj.permission.add(permission_instance)
# 						print(user_permission_obj)
# 						user_permission_obj.save()
# 					else:
# 						user_permission_obj = UserPermission(user=user)
# 						user_permission_obj.save()
# 						user_permission_obj.permission.add(permission_instance)
# 					return JsonResponse({'messsage':'Permission Added to the User', 'status':True}, status=200)
# 				return JsonResponse({'messsage':'Invalid User', 'status':False}, status=404)
# 			return JsonResponse({'messsage':'Please provide Valid user Id', 'status':False}, status=404)
# 		return JsonResponse({'messsage':'Bad Request', 'status':False}, status=400)


# 	def delete(self, request):
# 		if request.data:
# 			user_id = request.data.get('user', None)
# 			permission_id = request.data.get('permission', None)
# 			if user_id:
# 				user = UserPermission.objects.filter(id=user_id).first()
# 				permission_instance = Permission.objects.filter(id=permission_id).first()
# 				if user:
# 					user.permission.remove(permission_instance)
# 					return JsonResponse({'messsage':'Permission removed from the User', 'status':True}, status=200)
# 				return JsonResponse({'messsage':'Invalid User', 'status':False}, status=404)
# 			return JsonResponse({'messsage':'Please provide Valid user Id', 'status':False}, status=404)
# 		return JsonResponse({'messsage':'Bad Request', 'status':False}, status=400)

# 	def get(self, request):
# 		user = User.objects.all()
# 		serializer = UserPermissionSerialize(user, many=True)
# 		return Response(serializer.data)




##########################---------------------------views.py-----------------------#########################
from .email_service import *
#######-----------Adding New employee------------##############
# class AddEmployeeView(APIView):
# 	def post(self, request):
# 		if not check_permission(request, ['add_employee']):
# 			return JsonResponse({'messsage':'You are not allowed to do this operation', 'status':False}, status=401)
# 		if request.data:
# 			email = request.data.get('email', None)
# 			first_name = request.data.get('first_name', None)
# 			last_name = request.data.get('last_name', None)
# 			role = request.data.get('designation', None)
# 			department = request.data.get('department', None)
# 			contact = request.data.get('contact', None)
# 			senior_employee = request.data.get('senior_employee', None)
# 			password = request.data.get('password', None)

# 			if email:
# 				user = User.objects.filter(Q(username=email) | Q(email=email)).first()
# 				if user is None:
# 					user_save = User(
# 						first_name = first_name,
# 						last_name = last_name,
# 						username = email
# 						)
# 					user_save.set_password(password)
# 					user_save.save()
# 					user_role = Role(
# 						user = user_save,
# 						role_type = role,
# 						department = department
# 						)
# 					user_role.save()
# 					request.data["user"] = user_save.id
# 					request.data["approved"] = True
# 					# if  user_save:
# 					# 	try:
# 					# 		serializer = AddNewEmployeeSerializer(data=request.data)
# 					# 		if serializer.is_valid():
# 					# 			serializer.save()
# 					# 			subject, from_email, to = 'Regarding Account Creation - XYZ Company', 'kulkarnisaroj5@gmail.com', email
# 					# 			text_content = 'This is an important message.'
# 					# 			html_content = '<p>This is an important message.</p><br><p>Your Account in XYZ Company has been Created Succesfully, And your <strong> User ID</strong>- '+email+'</p><br/><br/><strong>Note: </strong> You will receive your password on your registered mailId shortly.'
# 					# 			msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
# 					# 			msg.attach_altenative(html_content, "text/html")
# 					# 			msg.send()
# 					# 			return JsonResponse({'message':'User Added Successfully'}, status=200)
# 					# 	except(Exception)as e:
# 					# 		user_save.delete()
# 					# 		user_role.delete()
# 					# 		pass
# 					# 	# print(serializer.errors)
# 					# 	# return JsonResponse({'message':'Bad String'}, status=400)
# 					# return JsonResponse({'message':'User cannot be added due to insufficient details'}, status=400)
# 				return JsonResponse({'message':'User Already Exists!'}, status=400)
# 			return JsonResponse({'message':'Email field is necessary'}, status=400)
# 		return JsonResponse({'message':'Bad Request'}, status=400)

# 	def put(self, request):
# 		if not check_permission(request, ['add_employee', 'edit_employee', 'delete_employee']):
# 			return JsonResponse({'message':'You are not allowed to do this operation', 'status':False}, status=401)
# 		if request.data:
# 			id = request.data.get('id', None)
# 			email = request.data.get('email', None)
# 			first_name = request.data.get('first_name', None)
# 			last_name = request.data.get('last_name', None)
# 			role = request.data.get('designation', None)
# 			department = request.data.get('department', None)
# 			contact = request.data.get('contact', None)
# 			if email:
# 				user = User.objects.filter(id=id).first()
# 				try:
# 					if user:
# 						user.first_name = first_name
# 						user.last_name = last_name
# 						user.username = email 
# 						user.save()
# 						user_role = Role.objects.filter(user=user).first()
# 						if emp_details:
# 							emp_details.contact = contact
# 							emp_details.email = email
# 							emp_details.save()
# 						return JsonResponse({'message':'User Updated Successfully'}, status=200)
# 					return JsonResponse({'message':'User Does Not Exist'}, status=400)
# 				except(Exception)as e:
# 					return JsonResponse({'message':'Something went wrong, Please try again later'}, status=400)
# 			return JsonResponse({'message':'Email field cannot be left blank'}, status=400)
# 		return JsonResponse({'message':'Bad Request'}, status=400)

# 	def get(self, request):
# 		if not check_permission(request, ['add_employee', 'edit_employee', 'delete_employee', 'view_employee']):
# 			return JsonResponse({'message':'You are not allowed to do this operation', 'status':False}, status=401)
# 		employees = Role.objects.all()
# 		user_ids = [i.user_id for i in employees]
# 		users = User.objects.all().filter(employee_other_details__approved=True)
# 		serializer = EmployeeListSerializer(users, many=True)

# 		return Response(serializer.data)

# class AssignManagerView(APIView):
# 	def post(self, request):
# 		if request.data:
# 			user_id = request.data.get('user', None)
# 			senior_employee_id = request.data.get('senior_employee', None)
# 			if user_id and senior_employee_id:
# 				user = Employees.objects.filter(user=user_id).first()
# 				senior_employee = User.objects.filter(id=senior_employee_id).first()
# 				if user and senior_employee:
# 					user.senior_employee = senior_employee
# 					user.save()
# 					return JsonResponse({'message':'Assigned as Senior Employee', 'status':True}, status=200)
# 				return JsonResponse({'message':'Invalid Employee or Senior Employee', 'status':False}, status=404)
# 			return JsonResponse({'message':'Please Provide Valid Unique Id', 'status':False}, status=400)
# 		return JsonResponse({'message':'Bad Request', 'status':False}, status=400)

# 	def delete(self, request):
# 		if request.data:
# 			user_id = request.data.get('user', None)
# 			if user_id:
# 				user = Employees.objects.filter(user=user_id).first()
# 				if user:
# 					user.senior_employee = None
# 					user.save()
# 					return JsonResponse({'message':'Removed Senior Employee', 'status':True}, status=200)
# 				return JsonResponse({'message':'Invalid Employee', 'status':False}, status=404)
# 			return JsonResponse({'message':'Please Provide Valid Unique Id', 'status':False}, status=400)
# 		return JsonResponse({'message':'Bad Request', 'status':False}, status=400)

# #########----------------Employee Approval-------------###################
# class ApproveEmployee(APIView):
# 	def get(self, request):
# 		if not check_permission(request, ['add_employee', 'edit_employee', 'delete_employee', 'view_employee', 'approve_employee']):
# 			return JsonResponse({'messsage':'You are not allowed to do this operation', 'status':False}, status=401)
# 		_id = request.data.get('id', None)
# 		employee = Employees.objects.filter(approved=False)
# 		employee_ids = [i.user_id for i in epmloyees]
# 		users = User.objects.filter(id__in=employee_ids)
# 		serializer = ApproveEmployeesSerializer(users, many=True)
# 		return Response(serializer.data)

# 	def post(self, request):
# 		if not check_permission(request, ['approve_employee']):
# 			return JsonResponse({'messsage':'You are not allowed to do this operation', 'status':False}, status=401)
# 		_id = request.data.get('id', None)
# 		employee = Employees.objects.filter(user=_id).first()
# 		if employee:
# 			employee.approved = True
# 			employee.save()
# 			user_obj = User.objects.filter(id=employee.user.id).first()
# 			password = request.data.get('password', None)
# 			if password:
# 				new_password = password
# 				user_obj.set_password(password)
# 			else:
# 				new_password = 'xyz123'
# 				user_obj.set_password('xyz123')
# 			user_obj.save()
# 			subject, from_email, to = 'Regarding Password Creation- XYZ Company', 'kulkarnisaroj5@gmail.com', employee.email
# 			text_content = 'This is an important message.'
# 			html_content = '<p>This is an important message.</p><br><p>Your password for the XYZ Company Account has been created successfully, and you <strong> User Id</strong>- '+employee.email+ '</p><br/><strong> Password: '+new_password+'</strong>.'
# 			msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
# 			msg.attach_altenative(html_content, "text/html")
# 			msg.send()
# 			return JsonResponse({'message':'User activated, and the password has been set for the user account'}, status=200)
# 		return JsonResponse({'message':'Bad Request'}, status=400)
